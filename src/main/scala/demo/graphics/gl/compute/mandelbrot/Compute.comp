#version 460 core

layout(local_size_x = 32, local_size_y = 32) in;

layout(binding = 0, rgba32f) uniform writeonly image2D image;

layout(location = 0) uniform int si;
layout(location = 1) uniform int sj;
layout(location = 2) uniform int maxI;
layout(location = 3) uniform vec2 minZ;
layout(location = 4) uniform vec2 maxZ;

const vec4[3] colors = {
  vec4(1.0, 0.0, 0.0, 1.0), 
  vec4(0.0, 1.0, 0.0, 1.0), 
  vec4(0.0, 0.0, 1.0, 1.0) 
}; 

float lengthSquared(vec2 a) {
  return a.x * a.x + a.y * a.y;
}

vec2 sum(vec2 a, vec2 b) {
  return vec2(a.x + b.x, a.y + b.y);
}

vec2 product(vec2 a, vec2 b) {
  return vec2(a.x * b.x - a.y * b.y, a.x * b.y + a.y * b.x);
}

uint mandelbrot(vec2 c) {
  uint i = 0;
  vec2 z = vec2(0.0, 0.0);
  while(i < maxI && length(z) < 2.0) { 
      // lengthSquared faster?
    z = sum(product(z, z), c);
    i++;
  }
  return i;
}

void main() {
  float dx = (maxZ.x - minZ.x) / si; // constant?
  float dy = (maxZ.y - minZ.y) / sj;
  float x = minZ.x + gl_GlobalInvocationID.x * dx;
  float y = minZ.y + gl_GlobalInvocationID.y * dy;
  uint i = mandelbrot(vec2(x, y));
  uint j = (17 * i) % maxI;
  float f = float(j) / maxI;

  vec4 color = vec4(0.0, 0.0, 0.0, 1.0);
  if(i < 10) color = colors[0];
  else if(i < 30) color = colors[1];
  else if(i < 50) color = colors[2];

  imageStore(image, ivec2(gl_GlobalInvocationID.xy), vec4(f, f, f, 1.0));
}
