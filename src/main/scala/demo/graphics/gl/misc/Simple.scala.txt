package demo.graphics.gl.misc

import java.io.File
import java.nio.ByteBuffer
import org.joml.Matrix4f
import org.lwjgl.opengl.GL11C.*
import org.lwjgl.BufferUtils
import yage.graphics.fw.App
import yage.graphics.gl.shader.program.Program
import yage.graphics.gl.shader.program.ProgramLoaderSrc
import yage.graphics.gl.shader.Shader
import yage.graphics.gl.shader.ShaderStage
import yage.scene.geometry.*
import yage.scene.geometry.*
import yage.math.Vec4

object Simple extends App:

  var program: Program = null
  var geometry: Geometry = null

  var matWM = Matrix4f()
  var matWV = Matrix4f()
  var matVW = Matrix4f()
  var matCV = Matrix4f()
  var matVM = Matrix4f()
  var matCM = Matrix4f()
  var buf = BufferUtils.createFloatBuffer(16)

  override def init() =
    debugMessenger.disable()
    val d = File("src/main/scala/demo/graphics/gl/misc")
    program = Program(File(d, "Simple.vert"), File(d, "Simple.frag"))
    // geometry = Quad(0.9, 0.8)
    // geometry = Ellipsoid(1.0f, 1.0f, 0.2f, 32, 32)
    geometry = ObjGeometry(File("src/main/resources/meshes/Crate.obj"))
    // geometry = NormalGeometry(Ellipsoid(1.0f, 1.0f, 0.2f, 32, 32), 0.5f, Vec4(0.8f, 0.8f, 0.8f, 1.0f))
    // geometry = Torus(0.2f, 0.8f, 32, 8)
    // geometry = Trigon()
    glClearColor(0, 0, 0, 1)
    glPolygonMode(GL_FRONT_AND_BACK, GL_LINE)

  override def draw() =
    glClear(GL_COLOR_BUFFER_BIT);
    program.use()
    program.setUniform4x4f("matCM", buf)
    geometry.draw()

  override def step(dt: Int) =
    // matWM.rotate(0.0004f, 1, 0, 0)
    matWM.rotate(0.0008f, 0, 1, 0)
    matWV.setTranslation(0, 0, 15)
    matWV.invert(matVW)
    matCV.setFrustum(-1, 1, -1, 1, 2, 1000)
    matVW.mul(matWM, matVM)
    matCV.mul(matVM, matCM)
    matCM.get(0, buf)
